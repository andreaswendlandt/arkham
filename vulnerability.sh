#!/bin/bash
# todo next: unify upper/lower case

# ensure this script started with root privileges
if [ $(id -u) -ne 0 ]; then
    echo "ERROR: This script must be run as root"
    exit 1
fi

# logging
logfile=/var/log/$(basename $0).log
mylog(){
    echo "$(date) $@" >>$logfile
}

# ensure we are the only running instance
lock_err(){
    mylog "ERROR, another instance is already running, aborting!!!"
    exit 1
}

pidfile="/var/run/$(basename $0)"
exec 300>$pidfile
flock -n 300 || lock_err
pid=$$
echo $pid 1>&300

# required packages: nmap, flock
required_packages=(nmap flock)
max=${#required_packages[*]}
i=0
packages_not_present=""
while (( i < max )); do
    if ! dpkg -l ${required_packages[$i]} >/dev/null 2>&1 && ! which ${required_packages[$i]} >/dev/null 2>&1; then
        packages_not_present="$packages_not_present ${required_packages[$i]}"
    fi
    i=$(expr $i + 1)
done

if ! [ -z "$packages_not_present" ]; then
    while true; do
        read -p "Should i install the missing package(s) $packages_not_present ?: yes/no " answer
        if [[ $answer = "yes" ]]; then
            apt-get update >/dev/null && apt-get install -y $packages_not_present >/dev/null
            mylog "Package $packages_not_present installed"
            break
        elif [[ $answer = "no" ]]; then
            mylog "WARNING, $packages_not_present missing on this system and will not be installed, skipping the dedicated sections and not doing a full scan"
            not_installed=1
            break
        else
            echo "$answer is not a valid Answer, please enter yes or no."
            continue
        fi
    done
fi

summary="\n##### SUMMARY OF $HOSTNAME FROM $(date) #####"

# network section
## open ports
open_ports=$(nmap -v localhost | egrep '^[[:digit:]]' | awk '$2 ~ open {print $1}')
summary="$summary\n\nThese Ports are open: \n$open_ports"

# user section
## user with login shells
users_with_login_shells=$(getent passwd | awk -F\: '$7 !~ /(nologin)|(false)|(sync)/ {print $1}')
summary="$summary\n\nThese users have login shells:\n$users_with_login_shells"

## ssh keys
home_dirs=""
for user in $users_with_login_shells; do
    home_dirs="$home_dirs $(getent passwd | grep $user | awk -F\: '{print $6}')"
done
ssh_keys=""
for dir in $home_dirs; do
    file_to_check=$(find $dir -name authorized_keys 2>/dev/null)
    if ! [ -z $file_to_check ]; then
        ssh_keys="$ssh_keys $(cat $file_to_check | awk '{print $3}')"
    fi
done
keys=$(for key in $ssh_keys; do
    echo "$key"
done)
summary="$summary\n\nThese ssh keys are stored on this system:\n$keys"

# file section
## files with setuid and/or setgid bit set
files_with_suid_and_sgid=$(find / -type f -perm /6000 2>/dev/null)
summary="$summary\n\nThese Files have the SUID and/or the SGID Bit set:\n$files_with_suid_and_sgid"

## files with no ownership
files_with_no_ownership=$(find / -nouser 2>/dev/null)
if ! [ -z $files_with_no_ownership ]; then
   summary="$summary\n\nThese files have no ownership:\n$files_with_no_ownership"
fi 

## files with no group associated to
files_with_no_group=$(find / -nogroup 2>/dev/null)
if ! [ -z $files_with_no_group ]; then
   summary="$summary\n\nThese files have no group associated to:\n$files_with_no_ownership"
fi

echo -e "$summary"
