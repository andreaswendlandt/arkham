#!/bin/bash
# todo next: user section, improve output 

# ensure this script started with root privileges
if [ $(id -u) -ne 0 ]; then
    echo "ERROR: This script must be run as root"
    exit 1
fi

# logging
logfile=/var/log/$(basename $0).log
mylog(){
    echo "$(date) $@" >>$logfile
}

# ensure we are the only running instance
lock_err(){
    mylog "ERROR, another instance is already running, aborting!!!"
    exit 1
}

pidfile="/var/run/$(basename $0)"
exec 300>$pidfile
flock -n 300 || lock_err
pid=$$
echo $pid 1>&300

# required packages: nmap, flock
required_packages=(nmap flock)
max=${#required_packages[*]}
i=0
packages_not_present=""
while (( i < max ))
do
    if ! dpkg -l ${required_packages[$i]} >/dev/null 2>&1 && ! which ${required_packages[$i]} >/dev/null 2>&1; then
        packages_not_present="$packages_not_present ${required_packages[$i]}"
    fi
    i=$(expr $i + 1)
done

if ! [ -z "$packages_not_present" ]; then
    while true; do
        read -p "Should i install the missing package(s) $packages_not_present ?: yes/no " answer
        if [[ $answer = "yes" ]]; then
            apt-get update && apt-get install -y  $packages_not_present
            break
        elif [[ $answer = "no" ]]; then
            mylog "WARNING, $packages_not_present missing on this system and will not be installed, skipping the dedicated sections and not doing a full scan"
            break
        else
            echo "$answer is not a valid Answer, please enter yes or no."
            continue
        fi
    done
fi

summary=""

# network section
open_ports=$(nmap -v localhost | egrep '^[[:digit:]]' | awk '$2 ~ open {print $1}')
summary=$(echo -e "these ports are open: \n$open_ports")

echo  "$summary"
# user section
users_with_login_shells="These users have login shells:
$(getent passwd | awk -F\: '$7 !~ /(nologin)|(false)|(sync)/ {print $1}')"
summary="$summary 
$users_with_login_shells"
echo "$summary"
